{"version":3,"sources":["Component/Todo/Todo.js","Component/TodoForm/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","toggleTodo","deleteTodo","style","marginTop","key","listStyle","type","checked","onChange","marginRight","fontSize","textDecoration","display","text","onClick","marginLeft","color","backgroundColor","borderStyle","borderRadius","TodoForm","addTodo","useState","inputValue","setInputValue","placeholder","e","target","value","width","height","paddingLeft","preventDefault","padding","fontWeight","App","id","todos","setTodos","newTodo","splice","className","marginBottom","updatedTodo","uuidv4","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0NAwBeA,G,MAtBF,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,MAAOC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,WAEpC,OACI,yBAAKC,MAAO,CAACC,UAAW,SACpB,wBACIC,IAAKN,EAAKC,MACVG,MAAO,CAACG,UAAW,SACnB,2BACIC,KAAK,WACLC,QAAST,EAAKS,QACdC,SAAU,kBAAMR,EAAWD,IAC3BG,MAAO,CAACO,YAAa,OAAQC,SAAU,UAE3C,uBAAGR,MAAO,CAACS,eAAgBb,EAAKS,QAAS,eAAiB,OAAQK,QAAQ,SAAUF,SAAS,SACxFZ,EAAKe,MAEV,4BAAQC,QAAS,kBAAMb,EAAWF,IAAQG,MAAO,CAACa,WAAY,OAAQC,MAAO,OAAQC,gBAAiB,UAAUC,YAAa,OAAQC,aAAc,QAAnJ,SCSDC,EAzBE,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,QAAsB,KAAbd,QACYe,mBAAS,KADR,mBAC9BC,EAD8B,KAClBC,EADkB,KAWrC,OACI,6BACI,2BACIlB,KAAK,OACLmB,YAAY,cACZjB,SAAU,SAACkB,GAAD,OAAOF,EAAcE,EAAEC,OAAOC,QACxCA,MAAOL,EACPrB,MAAO,CAAC2B,MAAO,MAAOC,OAAO,OAAQX,aAAc,MAAMD,YAAa,OAAQa,YAAa,UAE/F,4BAAQjB,QAjBK,SAACY,GACA,KAAfH,EACCG,EAAEM,iBAEFX,EAAQE,GAEZC,EAAc,KAWqBtB,MAAO,CAACe,gBAAiB,UAAWC,YAAa,OAAQY,OAAO,OAAQX,aAAc,MAAOJ,WAAY,OAAQkB,QAAS,OAAQjB,MAAO,OAAQkB,WAAY,QAA5L,Y,QCiDGC,EAjEH,WACV,IADgB,EAuBUb,mBAtBT,CACf,CACIc,GAAG,EACHvB,KAAM,sBACNN,SAAS,GAEb,CACI6B,GAAG,EACHvB,KAAM,sBACNN,SAAS,GAEb,CACI6B,GAAG,EACHvB,KAAM,kCACNN,SAAS,GAEb,CACI6B,GAAG,EACHvB,KAAM,cACNN,SAAS,KApBC,mBAuBT8B,EAvBS,KAuBFC,EAvBE,KAyBVtC,EAAa,SAACD,GAClB,IAAMwC,EAAO,YAAOF,GACpBE,EAAQxC,GAAOQ,SAAWgC,EAAQxC,GAAOQ,QACzC+B,EAASC,IAGLtC,EAAa,SAACF,GAClB,IAAMwC,EAAO,YAAOF,GACpBE,EAAQC,OAAOzC,EAAO,GACtBuC,EAASC,IAaX,OACE,yBAAKE,UAAU,OACb,wBAAIvC,MAAO,CAACwC,aAAc,SAA1B,aACA,kBAAC,EAAD,CAAUrB,QAbE,SAACR,GACf,IAAM8B,EAAc,CAClBP,GAAIQ,cACJ/B,KAAMA,EACNN,SAAQ,GAEJgC,EAAO,sBAAOF,GAAP,CAAcM,IAC3BL,EAASC,IAMqBhC,QAAS8B,EAAM9B,UAC1C8B,EAAMQ,KAAI,SAAC/C,EAAKC,GAAN,OACT,kBAAC,EAAD,CACED,KAAMA,EACNM,IAAKL,EACLA,MAAOA,EACPC,WAAYA,EACZC,WAAYA,SCnDF6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6cdf028d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Todo = ({todo, index, toggleTodo, deleteTodo}) => {\n    // console.log(todo)\n    return (\n        <div style={{marginTop: '36px'}}>\n            <ul \n                key={todo.index} \n                style={{listStyle: 'none'}}>\n                <input \n                    type=\"checkbox\" \n                    checked={todo.checked}\n                    onChange={() => toggleTodo(index)}\n                    style={{marginRight: '12px', fontSize: '24px'}}\n                />\n                <p style={{textDecoration: todo.checked? 'line-through' : 'none', display:'inline', fontSize:'18px'}}>\n                    {todo.text}\n                </p>\n                <button onClick={() => deleteTodo(index)} style={{marginLeft: '12px', color: '#fff', backgroundColor: '#f7cd00',borderStyle: 'none', borderRadius: '4px'}}>X</button>\n            </ul>\n        </div>\n    )\n};\n\nexport default Todo;\n","import React, {useState} from 'react'\n\nconst TodoForm = ({addTodo, checked}) => {\n    const [inputValue, setInputValue] = useState('');\n\n    const handleSubmit = (e) => {\n        if(inputValue === '') {\n            e.preventDefault();\n        } else {\n            addTodo(inputValue);\n        }\n        setInputValue('');\n    }\n    return (\n        <div>\n            <input \n                type=\"text\"\n                placeholder=\"Add todo...\"\n                onChange={(e) => setInputValue(e.target.value)}\n                value={inputValue}\n                style={{width: '50%', height:'40px', borderRadius: '8px',borderStyle: 'none', paddingLeft: '12px'}}\n            />\n            <button onClick={handleSubmit} style={{backgroundColor: '#f7cd00', borderStyle: 'none', height:'40px', borderRadius: '8px', marginLeft: '12px', padding: '12px', color: '#fff', fontWeight: '600'}}>Submit</button>\n        </div>\n    )\n};\n\nexport default TodoForm;\n","import React, {useState} from 'react';\nimport './App.css';\nimport Todo from './Component/Todo/Todo';\nimport TodoForm from './Component/TodoForm/TodoForm';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst App = () => {\n  const todoList = [\n    {\n        id:1,\n        text: 'pick up my daughter',\n        checked: false\n    },\n    {\n        id:2,\n        text: 'keep learning React',\n        checked: false\n    },\n    {\n        id:3,\n        text: 'start doing a new React project',\n        checked: false\n    },\n    {\n        id:4,\n        text: 'go shopping',\n        checked: false\n    }\n]\n  const [todos, setTodos] = useState(todoList);\n\n  const toggleTodo = (index) => {\n    const newTodo = [...todos];\n    newTodo[index].checked = !newTodo[index].checked;\n    setTodos(newTodo);\n  }\n\n  const deleteTodo = (index) => {\n    const newTodo = [...todos];\n    newTodo.splice(index, 1);\n    setTodos(newTodo);\n  }\n\n  const addTodo = (text) => {\n    const updatedTodo = {\n      id: uuidv4(),\n      text: text,\n      checked:false\n    }\n    const newTodo = [...todos, updatedTodo];\n    setTodos(newTodo);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1 style={{marginBottom: '40px'}}>Todo List</h1>\n      <TodoForm addTodo={addTodo} checked={todos.checked}/>\n      {todos.map((todo,index) => (\n        <Todo \n          todo={todo} \n          key={index} \n          index={index}\n          toggleTodo={toggleTodo}\n          deleteTodo={deleteTodo}\n          // checked={todo.checked}\n        />\n      ))}\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}